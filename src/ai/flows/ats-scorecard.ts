// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates an ATS compatibility score for a given resume based on provided criteria.
 *
 * - atsScorecard - A function that calculates the ATS compatibility score.
 * - AtsScorecardInput - The input type for the atsScorecard function.
 * - AtsScorecardOutput - The return type for the atsScorecard function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AtsScorecardInputSchema = z.object({
  resumeText: z
    .string()
    .describe('The text content of the resume to be evaluated.'),
  criteria: z
    .string()
    .describe('The specific criteria to measure the resume against.'),
});
export type AtsScorecardInput = z.infer<typeof AtsScorecardInputSchema>;

const AtsScorecardOutputSchema = z.object({
  score: z
    .number()
    .describe(
      'A numerical score (0-100) representing the resume’s compatibility with the provided criteria.'
    ),
  justification: z
    .string()
    .describe(
      'A detailed explanation of the score, highlighting strengths and weaknesses of the resume in relation to the criteria.'
    ),
});
export type AtsScorecardOutput = z.infer<typeof AtsScorecardOutputSchema>;

export async function atsScorecard(input: AtsScorecardInput): Promise<AtsScorecardOutput> {
  return atsScorecardFlow(input);
}

const prompt = ai.definePrompt({
  name: 'atsScorecardPrompt',
  input: {schema: AtsScorecardInputSchema},
  output: {schema: AtsScorecardOutputSchema},
  prompt: `You are an AI resume expert. 
You will provide a score (0-100) representing the resume’s compatibility with the provided criteria, along with a detailed explanation of the score, highlighting strengths and weaknesses of the resume in relation to the criteria.

Resume Text: {{{resumeText}}}
Criteria: {{{criteria}}}

Please provide the score and justification.
`,
});

const atsScorecardFlow = ai.defineFlow(
  {
    name: 'atsScorecardFlow',
    inputSchema: AtsScorecardInputSchema,
    outputSchema: AtsScorecardOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
