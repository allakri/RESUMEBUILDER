// This is an autogenerated file from Firebase Studio.
// It is not used in the app, but left for reference.
"use client";

import { useState } from "react";
import { Award, Loader2 } from "lucide-react";
import { atsScorecard } from "@/ai/flows/ats-scorecard";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Textarea } from "@/components/ui/textarea";

export function AtsScorecard() {
  const [resumeText, setResumeText] = useState<string>("");
  const [criteria, setCriteria] = useState<string>("");
  const [result, setResult] = useState<{
    score: number;
    justification: string;
  } | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const { toast } = useToast();

  const handleScore = async () => {
    if (!resumeText || !criteria) {
      toast({
        variant: "destructive",
        title: "Missing information",
        description: "Please provide both resume text and criteria.",
      });
      return;
    }

    setIsLoading(true);
    setResult(null);
    try {
      const scoreResult = await atsScorecard({ resumeText, criteria });
      setResult(scoreResult);
    } catch (error) {
      console.error(error);
      toast({
        variant: "destructive",
        title: "Scoring Failed",
        description: "There was an error scoring your resume. Please try again.",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const ScoreCircle = ({ score }: { score: number }) => {
    const circumference = 2 * Math.PI * 45;
    const offset = circumference - (score / 100) * circumference;

    return (
      <div className="relative h-32 w-32">
        <svg className="transform -rotate-90" width="128" height="128">
          <circle
            className="text-secondary"
            strokeWidth="10"
            stroke="currentColor"
            fill="transparent"
            r="45"
            cx="64"
            cy="64"
          />
          <circle
            className="text-primary transition-all duration-1000 ease-out"
            strokeWidth="10"
            stroke="currentColor"
            fill="transparent"
            strokeDasharray={circumference}
            strokeDashoffset={offset}
            strokeLinecap="round"
            r="45"
            cx="64"
            cy="64"
          />
        </svg>
        <span className="absolute inset-0 flex items-center justify-center font-headline text-3xl font-bold text-primary">
          {score}
        </span>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Textarea
          placeholder="Paste your resume text here..."
          value={resumeText}
          onChange={(e) => setResumeText(e.target.value)}
          className="h-48"
          aria-label="Resume Text"
        />
        <Textarea
          placeholder="Paste the job description or criteria here..."
          value={criteria}
          onChange={(e) => setCriteria(e.target.value)}
          className="h-48"
          aria-label="Job Description or Criteria"
        />
      </div>
      <Button
        onClick={handleScore}
        disabled={isLoading || !resumeText || !criteria}
      >
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Getting Score...
          </>
        ) : (
          <>
            <Award className="mr-2 h-4 w-4" />
            Get ATS Score
          </>
        )}
      </Button>

      {(isLoading || result) && (
        <div className="space-y-4">
          <h3 className="font-headline text-lg font-semibold">
            ATS Scorecard
          </h3>
          <Card>
            <CardContent className="p-6">
              {isLoading ? (
                <div className="flex flex-col items-center gap-4">
                  <Skeleton className="h-32 w-32 rounded-full" />
                  <Skeleton className="h-4 w-4/5" />
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-3/4" />
                </div>
              ) : (
                result && (
                  <div className="flex flex-col md:flex-row items-center gap-6">
                    <div className="flex flex-col items-center gap-2">
                      <ScoreCircle score={result.score} />
                      <p className="text-muted-foreground text-sm">
                        Compatibility Score
                      </p>
                    </div>
                    <div className="flex-1 space-y-2">
                      <h4 className="font-headline font-semibold text-primary">
                        Justification
                      </h4>
                      <p className="text-sm text-foreground/90 whitespace-pre-wrap">
                        {result.justification}
                      </p>
                    </div>
                  </div>
                )
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
